import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import keyboardmarkups as nav
from aiogram.contrib.fsm_storage.memory import MemoryStorage

try:
    # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    # –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    bot = Bot(token="6140832192:AAGXVzLxuBIKKGjU3QEOGx9a3A_omROHGpM")
    # –î–∏—Å–ø–µ—Ç—á–µ—Ä
    dp = Dispatcher(bot, storage=MemoryStorage())


    class StateWorker(StatesGroup):
        work_accounts = State()
        add_account = State()
        delete_accounts = State()

        edit_proxy = State()

        set_delays = State()
        set_delay_tweet = State()
        set_delay_like_retw = State()

        set_tweet_quantity = State()

    # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
    @dp.message_handler(commands=['start'])
    async def process_start_command(message: types.Message):
        await message.answer("–ü—Ä–∏–≤–µ—Ç\n–î–µ—Ä–∂–∏ –º–µ–Ω—é", reply_markup=nav.mainMenu)

    # –í—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –∞–∫–∫–∞—É–Ω—Ç–æ–º
    @dp.message_handler(state=StateWorker.work_accounts)
    async def add_account(message: types.Message, state: FSMContext):
        if message.text == 'üìÇ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç':
            await message.answer("–ê–∫–∫–∞—É–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        elif message.text == 'üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã':
            await message.answer("–ê–∫–∫–∞—É–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã")

        await state.finish()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ê–∫–∫–∞—É–Ω—Ç–æ–≤
    @dp.message_handler(state=StateWorker.work_accounts)
    async def add_account(message: types.Message, state: FSMContext):
        await message.answer("–ê–∫–∫–∞—É–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        await state.finish()

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
    @dp.message_handler(state=StateWorker.edit_proxy)
    async def add_account(message: types.Message, state: FSMContext):
        await message.answer("–ü—Ä–æ–∫—Å–∏ –∏–∑–º–µ–Ω—ë–Ω")
        await state.finish()

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–≤–∏—Ç–æ–≤
    @dp.message_handler(state=StateWorker.set_tweet_quantity)
    async def add_account(message: types.Message, state: FSMContext):
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–∏—Ç–æ–≤ –∑–∞–¥–∞–Ω–æ")
        await state.finish()

    # –ó–∞–¥–∞–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–µ–∫
    @dp.message_handler(state=StateWorker.set_delays)
    async def add_account(message: types.Message, state: FSMContext):
        await message.answer("–ó–∞–¥–∞–π—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ª–∞–π–∫–æ–º –∏ —Ä–µ—Ç–≤–∏—Ç–æ–º")
        await state.set_state(StateWorker.set_delay_like_retw.state)

    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ª–∞–π–∫–æ–º –∏ —Ä–µ—Ç–≤–∏—Ç–æ–º
    @dp.message_handler(state=StateWorker.set_delay_like_retw)
    async def add_account(message: types.Message, state: FSMContext):
        if message.text.isdigit():
            await message.answer("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ª–∞–π–∫–æ–º –∏ —Ä–µ—Ç–≤–∏—Ç–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n–¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π—Ç–µ –∑–∞–¥–µ—Ä–∂—É –º–µ–∂–¥—É —Ç–≤–∏—Ç–∞–º–∏")
            await state.set_state(StateWorker.set_delay_tweet.state)

    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ª–∞–π–∫–æ–º –∏ —Ä–µ—Ç–≤–∏—Ç–æ–º
    @dp.message_handler(state=StateWorker.set_delay_tweet)
    async def add_account(message: types.Message, state: FSMContext):
        if message.text.isdigit():
            await message.answer("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–≤–∏—Ç–∞–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            await state.finish()


    # –ü—Ä–∏—ë–º–Ω–∏–∫ –∫–æ–º–º–∞–Ω–¥
    @dp.callback_query_handler()
    async def menu(call: types.CallbackQuery):
        if call.data == "accounts":
            await call.message.answer("–†–∞–±–æ—Ç–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏", reply_markup=nav.cookieMenu)
            await StateWorker.add_account.set()

        elif call.data == "launch":
            await call.message.answer("–ó–∞–ø—É—Å–∫")

        elif call.data == "proxy":
            await call.message.answer("–°–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏")
            await StateWorker.edit_proxy.set()

        elif call.data == "delays":
            await call.message.answer("–ó–∞–¥–µ—Ä–∂–∫–∏")
            await StateWorker.set_delays.set()

        elif call.data == "quantity":
            await call.message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–∏—Ç–æ–≤")
            await StateWorker.set_tweet_quantity.set()

        elif call.data == '‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            await call.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=nav.mainMenu)

        elif call.data == 'üìÇ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç':
            await call.message.answer('–ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç', reply_markup=types.ReplyKeyboardRemove())
            # await CookieWorker.add_cookie.set()
        elif call.data == 'üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã':
            # await clear_cookies_all()
            await call.message.answer('–ê–∫–∫–∞—É–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã', reply_markup=nav.mainMenu)


    @dp.callback_query_handler(state='*')
    async def cancel(call: types.CallbackQuery, state: FSMContext):
        if call.data == 'back_menu':
            await state.finish()
            await bot.delete_message(call.message.chat.id, call.message.message_id)
            await call.message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ')


    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
    async def main():
        await dp.start_polling(bot)


    if __name__ == "__main__":
        asyncio.run(main())

except KeyboardInterrupt:
    print('–†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –≤—Ä—É—á–Ω—É—é')

