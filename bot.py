import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import keyboardmarkups as nav
import database as db
import main as main_script
from aiogram.contrib.fsm_storage.memory import MemoryStorage

try:
    # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    # –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    bot = Bot(token="6140832192:AAGXVzLxuBIKKGjU3QEOGx9a3A_omROHGpM")
    # –î–∏—Å–ø–µ—Ç—á–µ—Ä
    dp = Dispatcher(bot, storage=MemoryStorage())


    class StateWorker(StatesGroup):
        work_accounts = State()

        add_account_login = State()
        add_account_mail = State()

        edit_proxy = State()

        set_delays = State()
        set_delay_tweet = State()
        set_delay_like_retw = State()

        set_tweet_quantity = State()

        get_account = State() # –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª –Ω–æ—Ä–º –Ω–∞–∑–≤–∞–Ω–∏–µ (–ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏)
        post_count = State()

    # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
    @dp.message_handler(commands=['start'])
    async def process_start_command(message: types.Message):
        await message.answer("–ü—Ä–∏–≤–µ—Ç\n–î–µ—Ä–∂–∏ –º–µ–Ω—é", reply_markup=nav.mainMenu)

    # –í—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –∞–∫–∫–∞—É–Ω—Ç–æ–º
    #@dp.message_handler(state=StateWorker.work_accounts)
    #async def add_account(message: types.Message, state: FSMContext):
    #    if message.text == 'üìÇ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç':
    #        await message.answer("–ê–∫–∫–∞—É–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    #    elif message.text == 'üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã':
    #        await message.answer("–ê–∫–∫–∞—É–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã")
#
    #    await state.finish()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ê–∫–∫–∞—É–Ω—Ç–æ–≤
    @dp.message_handler(state=StateWorker.work_accounts)
    async def add_account(message: types.Message, state: FSMContext):
        await message.answer("–ê–∫–∫–∞—É–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        await state.finish()

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
    @dp.message_handler(state=StateWorker.edit_proxy)
    async def add_account(message: types.Message, state: FSMContext):
        if ':' in message.text and len(message.text) > 5:
            await message.answer("–ü—Ä–æ–∫—Å–∏ –∏–∑–º–µ–Ω—ë–Ω")
            return await state.finish()

        await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏")

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–≤–∏—Ç–æ–≤
    @dp.message_handler(state=StateWorker.set_tweet_quantity)
    async def add_account(message: types.Message, state: FSMContext):
        if message.text.isdigit():
            print(message.text)
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–∏—Ç–æ–≤ –∑–∞–¥–∞–Ω–æ")
            return await state.finish()

        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')

    @dp.message_handler(state=StateWorker.set_delay_like_retw)
    async def set_delay_like_retw(message: types.Message, state: FSMContext):
        if not message.text.isdigit():
            return await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        print('like delay:',message.text)
        await bot.delete_message(message.chat.id, message.message_id)
        await bot.send_message(message.chat.id,"–£—Å–ø–µ—à–Ω–æ\n–î–µ—Ä–∂–∏ –º–µ–Ω—é", reply_markup=nav.mainMenu)
        await state.finish()


    @dp.message_handler(state=StateWorker.set_delay_tweet)
    async def set_delay_tweet(message: types.Message, state: FSMContext):
        if not message.text.isdigit():
            return await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        print('Tweet delay:',message.text)
        await bot.delete_message(message.chat.id, message.message_id)
        await bot.send_message(message.chat.id, "–£—Å–ø–µ—à–Ω–æ\n–î–µ—Ä–∂–∏ –º–µ–Ω—é", reply_markup=nav.mainMenu)
        await state.finish()


    @dp.message_handler(state=StateWorker.add_account_mail)
    async def add_account_mail(message: types.Message, state: FSMContext):
        if '@' in message.text and ':' in message.text:
            async with state.proxy() as data:
                print(f'[mail:password] {message.text}\n'
                      f'[login:password] {data["account"]}')
                await bot.delete_message(message.chat.id, message.message_id)
                await bot.send_message(message.chat.id, "–£—Å–ø–µ—à–Ω–æ\n–î–µ—Ä–∂–∏ –º–µ–Ω—é", reply_markup=nav.mainMenu)
                db.Accounts.create(login=data['account'].split(':')[0],
                                   password = data['account'].split(':')[1],
                                   mail = message.text.split(':')[0],
                                   mail_password = message.text.split(':')[1])
                return await state.finish()

        await bot.delete_message(message.chat.id, message.message_id)
        await bot.send_message(message.chat.id, "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤–≤–µ–ª–∏ –ø–æ—á—Ç—É –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ—á—Ç–∞:–ø–∞—Ä–æ–ª—å")


    @dp.message_handler(state=StateWorker.get_account)
    async def get_account(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['url'] = message.text

        await bot.delete_message(message.from_user.id, message.message_id)
        await bot.send_message(message.from_user.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏')
        await StateWorker.post_count.set()

    @dp.message_handler(state=StateWorker.post_count)
    async def get_account(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            if not message.text.isdigit():
                await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ')
                await state.finish()

            await bot.delete_message(message.from_user.id, message.message_id)
            accounts = db.Accounts.select().dicts()
            if len(accounts) == 0:
                await bot.send_message(message.from_user.id, '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã')
                return await state.finish()

            for i in accounts:
                main_script.start_account(int(message.text), i['login'], i['password'], i['mail'], i['mail_password'], data['url'])

            await state.finish()



    @dp.message_handler(state=StateWorker.add_account_login)
    async def add_account_login(message: types.Message, state: FSMContext):
        if ':' in message.text:
            async with state.proxy() as data:
                data['account'] = message.text
            print(f'[login:password] {message.text}')
            await message.delete()
            await bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø–æ—á—Ç—É –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –Ω–µ–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ—á—Ç–∞:–ø–∞—Ä–æ–ª—å')
            return await StateWorker.add_account_mail.set()

        await bot.delete_message(message.chat.id, message.message_id)
        await bot.send_message(message.chat.id, "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å")

    # –ó–∞–¥–∞–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–µ–∫
  #  @dp.message_handler(state=StateWorker.set_delays)
  #  async def add_account(message: types.Message, state: FSMContext):
  #      await message.answer("–ó–∞–¥–∞–π—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ª–∞–π–∫–æ–º –∏ —Ä–µ—Ç–≤–∏—Ç–æ–º")
  #      await StateWorker.set_delay_like_retw.set()
#
  #  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ª–∞–π–∫–æ–º –∏ —Ä–µ—Ç–≤–∏—Ç–æ–º
  #  @dp.message_handler(state=StateWorker.set_delay_like_retw)
  #  async def add_account(message: types.Message, state: FSMContext):
  #      #async with state.proxy() as data:
  #      if message.text.isdigit():
  #          await message.answer("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ª–∞–π–∫–æ–º –∏ —Ä–µ—Ç–≤–∏—Ç–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n–¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π—Ç–µ –∑–∞–¥–µ—Ä–∂—É –º–µ–∂–¥—É —Ç–≤–∏—Ç–∞–º–∏")
  #          await state.set_state(StateWorker.set_delay_tweet.state)
#
  #  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ª–∞–π–∫–æ–º –∏ —Ä–µ—Ç–≤–∏—Ç–æ–º
  #  @dp.message_handler(state=StateWorker.set_delay_tweet)
  #  async def add_account(message: types.Message, state: FSMContext):
  #      if message.text.isdigit():
  #          await message.answer("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–≤–∏—Ç–∞–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
  #          await state.finish()


    # –ü—Ä–∏—ë–º–Ω–∏–∫ –∫–æ–º–º–∞–Ω–¥
    @dp.callback_query_handler(state='*')
    async def menu(call: types.CallbackQuery, state: FSMContext):
        if call.data == "accounts":
            await call.message.edit_text("–†–∞–±–æ—Ç–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏", reply_markup=nav.cookieMenu)

        elif call.data == 'add_new_account':
            await call.message.edit_text('–í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å')
            await StateWorker.add_account_login.set()

        elif call.data == "launch":
            await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç')
            await StateWorker.get_account.set()

        elif call.data == 'delay_likes':
            await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –ª–∞–π–∫–æ–≤ –∏ —Ç–≤–∏—Ç–æ–≤')
            await StateWorker.set_delay_like_retw.set()

        elif call.data == 'delay_twites':
            await call.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –ª–∞–π–∫–æ–≤ –∏ —Ç–≤–∏—Ç–æ–≤')
            await StateWorker.set_delay_tweet.set()

        elif call.data == "proxy":
            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–æ–∫—Å–∏")
            await StateWorker.edit_proxy.set()

        elif call.data == "delays":
            await call.message.edit_text("–í—ã–±–µ—Ä–∏ –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", reply_markup=nav.delay_kb)
            #await StateWorker.set_delays.set()

        elif call.data == "quantity":
            await call.message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–∏—Ç–æ–≤")
            await StateWorker.set_tweet_quantity.set()

        elif call.data == 'back_menu':
            await call.message.edit_text("–ü—Ä–∏–≤–µ—Ç\n–î–µ—Ä–∂–∏ –º–µ–Ω—é", reply_markup=nav.mainMenu)
            await state.finish()

        elif call.data == 'delete_all_accounts':
            db.Accounts.delete().execute()
            await call.message.edit_text('–£—Å–ø–µ—à–Ω–æ', reply_markup=nav.mainMenu)

       # elif call.data == '‚¨ÖÔ∏è–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
       #     await call.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=nav.mainMenu)
#
       # elif call.data == 'üìÇ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç':
       #     await call.message.answer('–ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç', reply_markup=types.ReplyKeyboardRemove())
       #     await StateWorker.add_account.set()
       # elif call.data == 'üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã':
       #     #await clear_cookies_all()
       #     await call.message.answer('–ê–∫–∫–∞—É–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã', reply_markup=nav.mainMenu)




    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
    async def main():
        db.connect()
        await dp.start_polling(bot)


    if __name__ == "__main__":
        asyncio.run(main())

except KeyboardInterrupt:
    print('–†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –≤—Ä—É—á–Ω—É—é')

